{"version":3,"file":"Layout.38369053.js","sources":["../../../../packages/theme-wulinks/src/client/layouts/Layout.vue"],"sourcesContent":["<template>\r\n  <ClientOnly>\r\n    <q-layout view=\"hHh lpr fff\">\r\n      <q-header reveal elevated>\r\n        <q-toolbar>\r\n          <q-btn dense flat round icon=\"menu\" @click=\"toggleLeftDrawer\" />\r\n          <q-toolbar-title> <router-link to=\"/\" style=\"color: #ffffff\">WULINKS</router-link> </q-toolbar-title>\r\n        </q-toolbar>\r\n      </q-header>\r\n\r\n      <q-drawer v-if=\"pageType === 'book'\" show-if-above v-model=\"leftDrawerOpen\" side=\"left\" bordered>\r\n        <q-scroll-area class=\"scroll-area\" :thumb-style=\"thumbStyle\" :bar-style=\"scollBarStyle\">\r\n          <book-side-bar :docTree=\"docTree\" :pageAnchors=\"anchorsRef\" :basePath=\"scopeBasePath\"> </book-side-bar>\r\n        </q-scroll-area>\r\n      </q-drawer>\r\n\r\n      <!-- TODO Transition没有起作用，之后再搞 -->\r\n      <q-page-container>\r\n        <q-scroll-area ref=\"docScrollRef\" class=\"scroll-area\" :thumb-style=\"thumbStyle\" :bar-style=\"scollBarStyle\" @scroll=\"onDocAreaScroll\">\r\n          <div style=\"padding: 30px\">\r\n            <div class=\"theme-wulinks-content\">\r\n              <content />\r\n            </div>\r\n          </div>\r\n        </q-scroll-area>\r\n      </q-page-container>\r\n    </q-layout>\r\n  </ClientOnly>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, ref, inject, watch, provide, computed } from 'vue';\r\nimport { usePageData, usePageFrontmatter } from '@vuepress/client';\r\nimport { scopeDocTreeSymbol, jumpToAnchorEventSymbol, goTopEventSymbol } from '../../shared/constant';\r\nimport BookSideBar from '../components/BookSideBar.vue';\r\nimport { QScrollArea } from 'quasar';\r\nimport { useRouter } from 'vue-router';\r\nimport type { Router } from 'vue-router';\r\n\r\nfunction replaceRouterAnchorHash(router: Router, anchorHash: string) {\r\n  if (router) {\r\n    const currentHash = decodeURIComponent(router.currentRoute.value.hash);\r\n    const newHash = decodeURIComponent(anchorHash || '');\r\n    if (currentHash !== newHash) {\r\n      router.replace({\r\n        hash: newHash,\r\n        force: true\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'Layout',\r\n  components: { BookSideBar },\r\n  setup() {\r\n    const leftDrawerOpen = ref(false);\r\n    const pageData = usePageData();\r\n    const frontmatter = usePageFrontmatter();\r\n    const pageType = computed(() => frontmatter.value['type'] || 'special');\r\n    const docTree = inject(scopeDocTreeSymbol);\r\n    const scopeBasePath = computed(() => frontmatter.value.scopePath || pageData.value.path);\r\n    const docScrollRef = ref<QScrollArea>();\r\n    const anchorsRef = ref(Array<any>());\r\n    const router = useRouter();\r\n    const updateAnchors = () => {\r\n      if (docScrollRef.value) {\r\n        anchorsRef.value = docScrollRef.value.getScrollTarget().querySelectorAll('.header-anchor');\r\n      }\r\n    };\r\n    watch(\r\n      () => router.currentRoute.value.path,\r\n      () => updateAnchors()\r\n    );\r\n    const onDocAreaScroll = () => {\r\n      const scroller = docScrollRef.value;\r\n      if (scroller) {\r\n        if (!anchorsRef.value.length) {\r\n          updateAnchors();\r\n        }\r\n        const anchors = anchorsRef.value;\r\n        if (scroller.getScrollPercentage().top === 1) {\r\n          // 滑到底部时认为当前在最后一个锚点处 TODO 太严格了，要优化一下，官方组件这里用的是距离底部5个px以内，这里可以用滚动区div的scrollTopMax做类似的判断\r\n          replaceRouterAnchorHash(router, anchors[anchors.length - 1].hash);\r\n        } else {\r\n          const position = scroller.getScrollPosition().top ?? 0;\r\n          // 根据锚点位置和当前位置，判断当前所处锚点 TODO 这里可以优化一下，改成从先前所处锚点开始搜索，而非从头暴搜\r\n          for (let i = 0; i < anchors.length - 1; i++) {\r\n            const pre = anchors[i];\r\n            const next = anchors[i + 1];\r\n            if ((i === 0 && position < pre.offsetTop) || (position >= pre.offsetTop && position < next.offsetTop)) {\r\n              replaceRouterAnchorHash(router, pre.hash);\r\n              break;\r\n            }\r\n            if (i == anchors.length - 2) {\r\n              replaceRouterAnchorHash(router, next.hash);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n    provide(jumpToAnchorEventSymbol, (anchor: string) => {\r\n      if (!anchor) {\r\n        return;\r\n      }\r\n      // 延迟200毫秒，确保anchorsRef更新完了再跳转 TODO 优化，用更优雅的方式实现同步\r\n      setTimeout(() => {\r\n        const anchors = anchorsRef.value;\r\n        if (anchors && anchors.length) {\r\n          for (let i = 0; i < anchors.length; i++) {\r\n            if (decodeURIComponent(anchors[i].hash) === anchor) {\r\n              anchors[i].scrollIntoView();\r\n            }\r\n          }\r\n        }\r\n      }, 200);\r\n    });\r\n    provide(goTopEventSymbol, () => {\r\n      if (docScrollRef.value) {\r\n        docScrollRef.value.setScrollPosition('vertical', 0);\r\n      }\r\n    });\r\n    return {\r\n      leftDrawerOpen,\r\n      toggleLeftDrawer() {\r\n        leftDrawerOpen.value = !leftDrawerOpen.value;\r\n      },\r\n      thumbStyle: {\r\n        right: '2px',\r\n        borderRadius: '9px',\r\n        backgroundColor: '#027be3',\r\n        width: '7px',\r\n        opacity: 0.5\r\n      },\r\n      scollBarStyle: {\r\n        right: '2px',\r\n        borderRadius: '9px',\r\n        backgroundColor: '#027be3',\r\n        width: '7px',\r\n        opacity: 0.2\r\n      },\r\n      pageType,\r\n      docTree,\r\n      scopeBasePath,\r\n      docScrollRef,\r\n      anchorsRef,\r\n      onDocAreaScroll\r\n    };\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.scroll-area {\r\n  height: calc(100vh - 50px);\r\n}\r\n</style>\r\n"],"names":["router","anchorHash","currentHash","decodeURIComponent","currentRoute","value","hash","newHash","replace","force","defineComponent","name","components","BookSideBar","setup","leftDrawerOpen","ref","pageData","usePageData","frontmatter","usePageFrontmatter","pageType","computed","docTree","inject","scopeDocTreeSymbol","scopeBasePath","scopePath","path","docScrollRef","anchorsRef","Array","useRouter","updateAnchors","getScrollTarget","querySelectorAll","jumpToAnchorEventSymbol","anchor","anchors","length","i","scrollIntoView","goTopEventSymbol","setScrollPosition","toggleLeftDrawer","thumbStyle","right","borderRadius","backgroundColor","width","opacity","scollBarStyle","onDocAreaScroll","scroller","getScrollPercentage","top","position","getScrollPosition","pre","next","offsetTop"],"mappings":"iQAuCA,WAAiCA,EAAgBC,MAC3CD,EAAQ,OACJE,EAAcC,mBAAmBH,EAAOI,aAAaC,MAAMC,MAC3DC,EAAUJ,mBAAmBF,GAAc,IAC7CC,IAAgBK,KACXC,QAAQ,CACbF,KAAMC,EACNE,OAAO,KAMf,MAAeC,EAAgB,CAC7BC,KAAM,SACNC,WAAY,aAAEC,GACdC,cACQC,EAAiBC,GAAI,GACrBC,EAAWC,IACXC,EAAcC,IACdC,EAAWC,GAAS,IAAMH,EAAYd,YAAiB,YACvDkB,EAAUC,EAAOC,GACjBC,EAAgBJ,GAAS,IAAMH,EAAYd,MAAMsB,WAAaV,EAASZ,MAAMuB,OAC7EC,EAAeb,IACfc,EAAad,EAAIe,SACjB/B,EAASgC,IACTC,EAAgB,KAChBJ,EAAaxB,UACJA,MAAQwB,EAAaxB,MAAM6B,kBAAkBC,iBAAiB,uBAI3E,IAAMnC,EAAOI,aAAaC,MAAMuB,OAChC,IAAMK,eA6BAG,GAA0BC,IAC3BA,eAIM,WACHC,EAAUR,EAAWzB,SACvBiC,GAAWA,EAAQC,eACZC,EAAI,EAAGA,EAAIF,EAAQC,OAAQC,IAC9BrC,mBAAmBmC,EAAQE,GAAGlC,QAAU+B,KAClCG,GAAGC,mBAIhB,UAEGC,GAAkB,KACpBb,EAAaxB,SACFA,MAAMsC,kBAAkB,WAAY,MAG9C,CACL5B,eAAAA,EACA6B,qBACiBvC,OAASU,EAAeV,OAEzCwC,WAAY,CACVC,MAAO,MACPC,aAAc,MACdC,gBAAiB,UACjBC,MAAO,MACPC,QAAS,IAEXC,cAAe,CACbL,MAAO,MACPC,aAAc,MACdC,gBAAiB,UACjBC,MAAO,MACPC,QAAS,IAEX7B,SAAAA,EACAE,QAAAA,EACAG,cAAAA,EACAG,aAAAA,EACAC,WAAAA,EACAsB,gBAxEsB,iBAChBC,EAAWxB,EAAaxB,SAC1BgD,EAAU,CACPvB,EAAWzB,MAAMkC,kBAGhBD,EAAUR,EAAWzB,SACgB,IAAvCgD,EAASC,sBAAsBC,MAETvD,EAAQsC,EAAQA,EAAQC,OAAS,GAAGjC,UACvD,OACCkD,EAAW,WAASC,oBAAoBF,OAAO,UAE5Cf,EAAI,EAAGA,EAAIF,EAAQC,OAAS,EAAGC,IAAK,OACrCkB,EAAMpB,EAAQE,GACdmB,EAAOrB,EAAQE,EAAI,MACd,IAANA,GAAWgB,EAAWE,EAAIE,WAAeJ,GAAYE,EAAIE,WAAaJ,EAAWG,EAAKC,UAAY,GAC7E5D,EAAQ0D,EAAIpD,YAGlCkC,GAAKF,EAAQC,OAAS,KACAvC,EAAQ2D,EAAKrD"}
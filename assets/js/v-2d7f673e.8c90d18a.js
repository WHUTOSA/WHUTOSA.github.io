(self.webpackChunkwulinks=self.webpackChunkwulinks||[]).push([[736],{711:(e,s,d)=>{"use strict";d.r(s),d.d(s,{data:()=>i});const i={key:"v-2d7f673e",path:"/redisson/04-%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%A1%A8/",title:"分布式链表",lang:"ZH-cn",frontmatter:{title:"分布式链表",type:"book",scopePath:"/redisson",sort:4},excerpt:"",headers:[{level:2,title:"Redisson 的分布式数据集合",slug:"redisson-的分布式数据集合",children:[]}]}},987:(e,s,d)=>{"use strict";d.r(s),d.d(s,{default:()=>n});const i=(0,d(252).uE)('<h1 id="分布式链表" tabindex="-1"><a class="header-anchor" href="#分布式链表" aria-hidden="true">#</a> 分布式链表</h1><h2 id="redisson-的分布式数据集合" tabindex="-1"><a class="header-anchor" href="#redisson-的分布式数据集合" aria-hidden="true">#</a> Redisson 的分布式数据集合</h2><p>Redisson 提供了诸如优先双端队列、有序集、多值映射等分布式数据集合，其中有不少直接继承自 JDK 的相应接口，例如 <code>RList</code> 就继承了 <code>List</code>。</p><p>对于这些数据结构各自的特点，我们都很熟悉了，自不必加以赘述；Redisson 实现它们的方法，我们也基本上能直接猜个八九不离十，毕竟 Redisson 也不可能在基础的数据结构上玩出花来。所以，深入地去研究 <code>RedissonList</code> 实现 <code>add(E e)</code> 方法的细节并不会给我们带来多大的收益，我们应该把注意力放在那些有特色的地方。</p>',4),n={render:function(e,s){return i}}}}]);